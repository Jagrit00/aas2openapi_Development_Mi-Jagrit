import typing
import aas2openapi
from aas2openapi.middleware import Middleware
from aas2openapi import models
from enum import Enum


import models.Layer1 as Layer1
import models.Network as Network 

example_Network = Network.Network(
    id="Network",
    id_short="Network",

    KPI=Network.Network_KPI(
        id="Network_KPI",
        id_short="Network_KPI",
        range=3,
        target=5,
        actualValue=3,
        KPI_Type="OEE",
        Sub_KPI=Network.Sub_KPI(
            id="Sub_KPI",
            id_short="Sub_KPI",
        ),
    ),    
    Product=Network.Network_Product(
        id="Network_Product",
        id_short="Network_Product",
        product_group="Smart Phones",
        BOM=Layer1.BOM(
            id="BOM",
            id_short="BOM",
            components="Camera",
            subcomponents="Lense",
            material="Glass",
        ),
        name = "Camera Lense",
        measurements_in_cm = Network.measurements_in_cm(
            id_short = "measurements_in_cm",
            measurements_in_cm_list = [2,3],
            
         ),

        Material = Network.Material(
             id_short = "Network_Material",
             id="Network_Material",
             name = "Glass",
             cost = "5",
            ),
        Component = Network.Component(
             id_short = "Network_Component",
             id="Network_Component",
             name = "glass",
             subComponent=Network.subComponents(
                 id_short="Network_subComponents",
                 id="Network_subComponents",
                   
             ),
             cost="5",
             transfer_price="2",
             measurements_in_cm=Network.measurements_in_cm(
                id_short="Network_measurements_in_cm",
                measurements_in_cm_list = [2,3],
             ),
             weight="3grams",
             time_stamp_lastprocess="12:00 1.1.24",
        
         ),
        cost = "5",
        product_generation = "2nd",   
            
    ),
    Order=Network.Network_Order(
        id="Network_Order",
        id_short="Network_Order",
        
        orderType = "Supplier",
        quantity= 200,
        time_of_order= "1.1.24",
        required_processes=Layer1.required_processes(
            id_short= "required_processes",
        ),
        position= "4th",
        orderStatus=Network.orderStatus.preparing,
        # (
        #     #id_short="Network.orderStatus",
        #     status= Network.orderStatus.in_progress,

        # ),

        priority= "medium",
        OrderType = Network.OrderType.ProductionOrder
        # (
        #     #id_short="Network.OrderType",
        #     type = Network.OrderType.SupplierOrder,

        # )

    ),
)
#     Process = Network.Network_Process(
#         id_short="test31",
#         id="test31",
#         processType="test",
#         required_capabilities=Layer1.required_capabilities(
#             id="test32",
#             id_short="test32",
#             test="test",
#         subProcesses=Network.subProcesses(
#             id_short="test33",
#         ),
#         process_time="test",
        
#         process_cost="test",
#         ProcessStatus=Network.ProcessStatus(
#             id_short="test34",
#         ),
        
#         ProcessType = "test",
#         required_capabilities="test",
        



#     )
 

    

obj_store = aas2openapi.convert_pydantic_model_to_aas(example_Network)

import basyx.aas.adapter.json.json_serialization

with open("examples/simple_aas_and_submodels.json", "w", encoding="utf-8") as json_file:
    basyx.aas.adapter.json.write_aas_json_file(json_file, obj_store)


# Reverse transformation

data_model = aas2openapi.convert_object_store_to_pydantic_models(obj_store)

# Create the middleware and load the models
middleware = Middleware()

middleware.load_pydantic_models([Network.Network])
# middleware.load_pydantic_model_instances([example_product, example_process])
# middleware.load_aas_objectstore(obj_store)
# middleware.load_json_models(file_path="examples/example_json_model.json")
middleware.generate_rest_api()
middleware.generate_graphql_api()
middleware.generate_model_registry_api()

app = middleware.app
#run with: uvicorn examples.minimal_example:app --reload
if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app)
